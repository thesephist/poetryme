"use strict";window.$=document.querySelector.bind(document),window.$$=document.querySelectorAll.bind(document),window.PoetryMeUtils={eventAdder:function eventAdder(a,b,c){const d=$$(a)||[],e=d.length;for(let f=0;f<e;f++)d[f].addEventListener(b,c);return d},extendObject:function extendObject(a,b){return Object.keys(b).forEach(function(c){a[c]=b[c]}),a},getLocation:function getLocation(a){var b=a.getBoundingClientRect();return extendObject(b,{width:b.right-b.left,height:b.bottom-b.top}),b},getNodeArray:function getNodeArray(a){return Array.prototype.slice.apply(document.querySelectorAll(a))}};
'use strict';window.PoetryMe={ev:{"click #subscription__submit":'signup',"keydown input":'onKeydown'},f:{validate:(a)=>!!a.trim(),signup(){const a=$('#subscription__name').value.trim(),b=$('#subscription__email').value.trim();return PoetryMe.f.validate(a)?PoetryMe.f.validate(b)?void(fetch(`https://maker.ifttt.com/trigger/trubadour_signup/with/key/bVFc_4CoaN3D_lYvI8-OPZ?value1=${a}&value2=${b}`,{mode:'no-cors'}).then(()=>{alert(`Thanks for signing up, ${a}!`)}),$('#subscription__name').value='',$('#subscription__email').value=''):void alert('We can\'t send you an email without an email address! Please enter your email'):void alert('We didn\'t get a name! A nickname is just fine.')},onKeydown(a){13===a.keyCode&&PoetryMe.f.signup()}}},PoetryMe.init=function(){Object.keys(PoetryMe.ev).forEach(function(a){var b=a.split(' ')[0],c=a.split(' ').splice(1).join(' '),d=PoetryMe.f[PoetryMe.ev[a]];PoetryMeUtils.eventAdder(c,b,d)}),console.info('PoetryMe initialized')},PoetryMe.init();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIiwibWFpbi5qcyJdLCJuYW1lcyI6WyJ3aW5kb3ciLCIkIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYmluZCIsIiQkIiwicXVlcnlTZWxlY3RvckFsbCIsIlBvZXRyeU1lVXRpbHMiLCJldmVudEFkZGVyIiwibGVuZ3RoIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV4dGVuZE9iamVjdCIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiZ2V0TG9jYXRpb24iLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aWR0aCIsInJpZ2h0IiwibGVmdCIsImhlaWdodCIsImJvdHRvbSIsInRvcCIsImdldE5vZGVBcnJheSIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJhcHBseSIsIlBvZXRyeU1lIiwiZXYiLCJmIiwidmFsaWRhdGUiLCJ0cmltIiwic2lnbnVwIiwidmFsdWUiLCJmZXRjaCIsIm1vZGUiLCJ0aGVuIiwiYWxlcnQiLCJvbktleWRvd24iLCJrZXlDb2RlIiwiaW5pdCIsInNwbGl0Iiwic3BsaWNlIiwiam9pbiIsImNvbnNvbGUiLCJpbmZvIl0sIm1hcHBpbmdzIjoiYUFBQUEsT0FBT0MsQ0FBUCxDQUFXQyxTQUFTQyxhQUFULENBQXVCQyxJQUF2QixDQUE0QkYsUUFBNUIsRUFDWEYsT0FBT0ssRUFBUCxDQUFZSCxTQUFTSSxnQkFBVCxDQUEwQkYsSUFBMUIsQ0FBK0JGLFFBQS9CLEVBRVpGLE9BQU9PLGFBQVAsQ0FBdUIsQ0FFbkJDLFdBQVksMEJBQXdDLENBQ2hELEtBQU0sR0FBVUgsU0FBaEIsQ0FDTSxFQUFVLEVBQVFJLE1BRHhCLENBR0EsSUFBSyxHQUFJLEdBQUksQ0FBYixDQUFnQixHQUFoQixDQUE2QixHQUE3QixDQUNJLEtBQVdDLGdCQUFYLE1BR0osUUFDSCxDQVhrQixDQWFuQkMsYUFBYywwQkFBa0IsQ0FNNUIsTUFKQUMsUUFBT0MsSUFBUCxJQUFnQkMsT0FBaEIsQ0FBd0IsV0FBYyxDQUNsQyxLQUFXLElBQ2QsQ0FGRCxDQUlBLEVBQ0gsQ0FwQmtCLENBc0JuQkMsWUFBYSx1QkFBYSxDQUN0QixHQUFJLEdBQXFCLEVBQUdDLHFCQUFILEVBQXpCLENBT0EsTUFMQUwsZ0JBQWlDLENBQzdCTSxNQUFPLEVBQW1CQyxLQUFuQixDQUEyQixFQUFtQkMsSUFEeEIsQ0FFN0JDLE9BQVEsRUFBbUJDLE1BQW5CLENBQTRCLEVBQW1CQyxHQUYxQixDQUFqQyxDQUtBLEVBQ0gsQ0EvQmtCLENBaUNuQkMsYUFBYyx3QkFBcUIsQ0FDL0IsTUFBT0MsT0FBTUMsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDLEtBQXRCLENBQTRCekIsU0FBU0ksZ0JBQVQsR0FBNUIsQ0FDVixDQW5Da0I7YUNIdkJOLE9BQU80QixRQUFQLENBQWtCLENBR2RDLHVFQUhjLENBU2pCQyxFQUFHLENBQ0ZDLFNBQVUsS0FBSyxDQUFDLENBQUMsRUFBRUMsSUFBRixFQURmLENBR0ZDLFFBQVMsQ0FDUixLQUFNLEdBQU9oQyxFQUFFLHFCQUFGLEVBQXlCaUMsS0FBekIsQ0FBK0JGLElBQS9CLEVBQWIsQ0FDTSxFQUFRL0IsRUFBRSxzQkFBRixFQUEwQmlDLEtBQTFCLENBQWdDRixJQUFoQyxFQURkLENBRFEsTUFJSEosVUFBU0UsQ0FBVCxDQUFXQyxRQUFYLEdBSkcsQ0FPSUgsU0FBU0UsQ0FBVCxDQUFXQyxRQUFYLEdBUEosTUFZUkksTUFBTywyRkFBRCxDQUFnRyxXQUFoRyxDQUFnSCxFQUF0SCxDQUF5SCxDQUM1R0MsS0FBTSxTQURzRyxDQUF6SCxFQUVHQyxJQUZILENBRVEsSUFBTSxDQUVEQyxNQUFPLDBCQUFELENBQStCLEdBQXJDLENBQ1osQ0FMRCxDQVpRLENBbUJSckMsRUFBRSxxQkFBRixFQUF5QmlDLEtBQXpCLENBQWlDLEVBbkJ6QixDQW9CUmpDLEVBQUUsc0JBQUYsRUFBMEJpQyxLQUExQixDQUFrQyxFQXBCMUIsTUFRUEksT0FBTSwrRUFBTixDQVJPLEtBS1BBLE9BQU0saURBQU4sQ0FnQkssQ0F4QkwsQ0EwQklDLFlBQWUsQ0FDUyxFQUFoQixLQUFJQyxPQURHLEVBRVBaLFNBQVNFLENBQVQsQ0FBV0csTUFBWCxFQUVQLENBOUJMLENBVGMsRUE0Q2xCTCxTQUFTYSxJQUFULENBQWdCLFVBQVcsQ0FHdkI3QixPQUFPQyxJQUFQLENBQVllLFNBQVNDLEVBQXJCLEVBQXlCZixPQUF6QixDQUFpQyxXQUFxQixDQUNsRCxHQUFJLEdBQVksRUFBVzRCLEtBQVgsQ0FBaUIsR0FBakIsRUFBc0IsQ0FBdEIsQ0FBaEIsQ0FDSSxFQUFXLEVBQVdBLEtBQVgsQ0FBaUIsR0FBakIsRUFBc0JDLE1BQXRCLENBQTZCLENBQTdCLEVBQWdDQyxJQUFoQyxDQUFxQyxHQUFyQyxDQURmLENBRUksRUFBS2hCLFNBQVNFLENBQVQsQ0FBV0YsU0FBU0MsRUFBVCxHQUFYLENBRlQsQ0FJQXRCLGNBQWNDLFVBQWQsT0FDSCxDQU5ELENBSHVCLENBb0J2QnFDLFFBQVFDLElBQVIsQ0FBYSxzQkFBYixDQUVILEVBRURsQixTQUFTYSxJQUFUIiwiZmlsZSI6InN0YXRpYy9qcy9tYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIndpbmRvdy4kID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvci5iaW5kKGRvY3VtZW50KTtcbndpbmRvdy4kJCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwuYmluZChkb2N1bWVudCk7XG5cbndpbmRvdy5Qb2V0cnlNZVV0aWxzID0ge1xuXG4gICAgZXZlbnRBZGRlcjogZnVuY3Rpb24oc2VsZWN0b3IsIGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0cyA9ICQkKHNlbGVjdG9yKSB8fCBbXTtcbiAgICAgICAgY29uc3QgdExlbmd0aCA9IHRhcmdldHMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0YXJnZXRzW2ldLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0cztcbiAgICB9LFxuXG4gICAgZXh0ZW5kT2JqZWN0OiBmdW5jdGlvbihvYmosIGVsKSB7XG5cbiAgICAgICAgT2JqZWN0LmtleXMoZWwpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IGVsW2tleV07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcblxuICAgIGdldExvY2F0aW9uOiBmdW5jdGlvbihlbCkge1xuICAgICAgICB2YXIgYm91bmRpbmdDbGllbnRSZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgZXh0ZW5kT2JqZWN0KGJvdW5kaW5nQ2xpZW50UmVjdCwge1xuICAgICAgICAgICAgd2lkdGg6IGJvdW5kaW5nQ2xpZW50UmVjdC5yaWdodCAtIGJvdW5kaW5nQ2xpZW50UmVjdC5sZWZ0LFxuICAgICAgICAgICAgaGVpZ2h0OiBib3VuZGluZ0NsaWVudFJlY3QuYm90dG9tIC0gYm91bmRpbmdDbGllbnRSZWN0LnRvcFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gYm91bmRpbmdDbGllbnRSZWN0O1xuICAgIH0sXG5cbiAgICBnZXROb2RlQXJyYXk6IGZ1bmN0aW9uKGlkZW50aWZpZXIpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGlkZW50aWZpZXIpKTtcbiAgICB9XG5cbn07XG4iLCJ3aW5kb3cuUG9ldHJ5TWUgPSB7XG5cbiAgICAvLyBldmVudHNcbiAgICBldjoge1xuXHRcdCdjbGljayAjc3Vic2NyaXB0aW9uX19zdWJtaXQnOiAnc2lnbnVwJyxcblx0XHQna2V5ZG93biBpbnB1dCc6ICdvbktleWRvd24nLFxuXHR9LFxuXG5cdC8vIGZ1bmN0aW9uc1xuXHRmOiB7XG5cdFx0dmFsaWRhdGU6IHMgPT4gISFzLnRyaW0oKSxcblxuXHRcdHNpZ251cCgpIHtcblx0XHRcdGNvbnN0IG5hbWUgPSAkKCcjc3Vic2NyaXB0aW9uX19uYW1lJykudmFsdWUudHJpbSgpO1xuXHRcdFx0Y29uc3QgZW1haWwgPSAkKCcjc3Vic2NyaXB0aW9uX19lbWFpbCcpLnZhbHVlLnRyaW0oKTtcblxuXHRcdFx0aWYgKCFQb2V0cnlNZS5mLnZhbGlkYXRlKG5hbWUpKSB7XG5cdFx0XHRcdGFsZXJ0KCdXZSBkaWRuXFwndCBnZXQgYSBuYW1lISBBIG5pY2tuYW1lIGlzIGp1c3QgZmluZS4nKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSBlbHNlIGlmICghUG9ldHJ5TWUuZi52YWxpZGF0ZShlbWFpbCkpIHtcblx0XHRcdFx0YWxlcnQoJ1dlIGNhblxcJ3Qgc2VuZCB5b3UgYW4gZW1haWwgd2l0aG91dCBhbiBlbWFpbCBhZGRyZXNzISBQbGVhc2UgZW50ZXIgeW91ciBlbWFpbCcpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGZldGNoKGBodHRwczovL21ha2VyLmlmdHR0LmNvbS90cmlnZ2VyL3RydWJhZG91cl9zaWdudXAvd2l0aC9rZXkvYlZGY180Q29hTjNEX2xZdkk4LU9QWj92YWx1ZTE9JHtuYW1lfSZ2YWx1ZTI9JHtlbWFpbH1gLCB7XG4gICAgICAgICAgICAgICAgbW9kZTogJ25vLWNvcnMnLFxuXHRcdFx0fSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogaW1wcm92ZSBsYXRlclxuICAgICAgICAgICAgICAgIGFsZXJ0KGBUaGFua3MgZm9yIHNpZ25pbmcgdXAsICR7bmFtZX0hYCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0JCgnI3N1YnNjcmlwdGlvbl9fbmFtZScpLnZhbHVlID0gJyc7XG5cdFx0XHQkKCcjc3Vic2NyaXB0aW9uX19lbWFpbCcpLnZhbHVlID0gJyc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb25LZXlkb3duKGV2dCkge1xuICAgICAgICAgICAgaWYgKGV2dC5rZXlDb2RlID09PSAxMykge1xuICAgICAgICAgICAgICAgIFBvZXRyeU1lLmYuc2lnbnVwKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9LFxuXG59XG5cblBvZXRyeU1lLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICAgIC8vIGFkZCBldmVudCBsaXN0ZW5lcnNcbiAgICBPYmplY3Qua2V5cyhQb2V0cnlNZS5ldikuZm9yRWFjaChmdW5jdGlvbihpZGVudGlmaWVyKSB7XG4gICAgICAgIHZhciBldmVudE5hbWUgPSBpZGVudGlmaWVyLnNwbGl0KCcgJylbMF0sXG4gICAgICAgICAgICBzZWxlY3RvciA9IGlkZW50aWZpZXIuc3BsaXQoJyAnKS5zcGxpY2UoMSkuam9pbignICcpLFxuICAgICAgICAgICAgZm4gPSBQb2V0cnlNZS5mW1BvZXRyeU1lLmV2W2lkZW50aWZpZXJdXVxuXG4gICAgICAgIFBvZXRyeU1lVXRpbHMuZXZlbnRBZGRlcihzZWxlY3RvciwgZXZlbnROYW1lLCBmbilcbiAgICB9KVxuXG4gICAgLy8gc2VydmljZVdvcmtlciBjaGVja1xuICAgIC8vIGlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7XG4gICAgLy8gICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKCdzdy5qcycpLnRoZW4oZnVuY3Rpb24ocmVnaXN0cmF0aW9uKSB7XG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZygnU2VydmljZSB3b3JrZXIgcmVnaXN0cmF0aW9uIHN1Y2Nlc3NmdWwnKVxuICAgIC8vICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAvLyAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NlcnZpY2Ugd29ya2VyIHJlZ2lzdHJhdGlvbiBmYWlsZWQnLCBlcnIpXG4gICAgLy8gICAgIH0pXG4gICAgLy8gfVxuXG4gICAgY29uc29sZS5pbmZvKCdQb2V0cnlNZSBpbml0aWFsaXplZCcpXG5cbn1cblxuUG9ldHJ5TWUuaW5pdCgpXG4iXX0=
